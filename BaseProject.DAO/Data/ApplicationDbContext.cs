// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using BaseProject.DAO.Models;

namespace BaseProject.DAO.Data;

public partial class ApplicationDbContext : IdentityDbContext<AspNetUser>
{
    public ApplicationDbContext()
    {
    }

    public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Empresa> Empresa { get; set; }

    public virtual DbSet<EmpresaLogo> EmpresaLogo { get; set; }

    public virtual DbSet<Log> Log { get; set; }

    public virtual DbSet<LogAcessoUsuario> LogAcessoUsuario { get; set; }

    public virtual DbSet<LogOpenAI> LogOpenAI { get; set; }

	public virtual DbSet<Processo> Processo { get; set; }

    public virtual DbSet<ProcessoArquivo> ProcessoArquivo { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<UsuarioFoto> UsuarioFoto { get; set; }

	protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	{
		if (!optionsBuilder.IsConfigured)
		{
			var configuration = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory()).AddJsonFile("appsettings.json").Build();
			optionsBuilder.UseSqlServer(configuration.GetConnectionString(Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")));
		}
	}

	protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
		base.OnModelCreating(modelBuilder);

		modelBuilder.Entity<Empresa>(entity =>
        {
            entity.Property(e => e.CNPJ).IsFixedLength();

            entity.HasOne(d => d.IdRepresentanteNavigation).WithMany(p => p.Empresa).HasConstraintName("FK_Empresa_Representante");
        });

        modelBuilder.Entity<EmpresaLogo>(entity =>
        {
            entity.Property(e => e.IdEmpresa).ValueGeneratedNever();

            entity.HasOne(d => d.IdEmpresaNavigation).WithOne(p => p.EmpresaLogo).HasConstraintName("FK_Empresa_Logo");
        });

        modelBuilder.Entity<LogAcessoUsuario>(entity =>
        {
            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.LogAcessoUsuario).HasConstraintName("FK_Usuario_LogAcessoUsuario");
        });

        modelBuilder.Entity<LogOpenAI>(entity =>
        {
            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.LogOpenAI).HasConstraintName("FK_LogOpenAI_Usuario");
        });

		modelBuilder.Entity<Processo>(entity =>
        {
            entity.HasOne(d => d.IdEmpresaNavigation).WithMany(p => p.Processo).HasConstraintName("FK_Processo_Empresa");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Processo).HasConstraintName("FK_Processo_Usuario");
        });

        modelBuilder.Entity<ProcessoArquivo>(entity =>
        {
            entity.Property(e => e.IdProcesso).ValueGeneratedNever();

            entity.HasOne(d => d.IdProcessoNavigation).WithOne(p => p.ProcessoArquivo).HasConstraintName("FK_ProcessoArquivo_Processo");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.Property(e => e.CPF).IsFixedLength();

            entity.HasOne(d => d.IdEmpresaNavigation).WithMany(p => p.UsuarioIdEmpresaNavigation)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuario_Empresa");

            entity.HasOne(d => d.IdEmpresaSelecionadaNavigation).WithMany(p => p.UsuarioIdEmpresaSelecionadaNavigation).HasConstraintName("FK_Usuario_EmpresaSelecionada");
        });

        modelBuilder.Entity<UsuarioFoto>(entity =>
        {
            entity.Property(e => e.IdUsuario).ValueGeneratedNever();

            entity.HasOne(d => d.IdUsuarioNavigation).WithOne(p => p.UsuarioFoto).HasConstraintName("FK_Usuario_Foto");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}